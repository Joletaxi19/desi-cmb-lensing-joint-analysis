likelihood:
  # Cgg and Ckg
  cobaya_friendly_v2.XcorrLike:
    python_path: /pscratch/sd/n/nsailer/MaPar/likelihoods/
    # json file contains cls, window functions and covariance
    jsonfn:   /pscratch/sd/n/nsailer/MaPar/mocks/buzzard/buzzard_simCov.json
    # name of the CMB lensing map (in json file)
    kapName:  PR4
    # names of the galaxy samples (in json file)
    galNames: [LRGz1,LRGz2,LRGz3,LRGz4]
    # redshift distribution filenames (one for each galaxy sample)
    dndzfns:
    - /pscratch/sd/n/nsailer/MaPar/mocks/buzzard/dNdz_z1.txt
    - /pscratch/sd/n/nsailer/MaPar/mocks/buzzard/dNdz_z2.txt
    - /pscratch/sd/n/nsailer/MaPar/mocks/buzzard/dNdz_z3.txt
    - /pscratch/sd/n/nsailer/MaPar/mocks/buzzard/dNdz_z4.txt
    # scale cuts
    amin: [75,75,75,75]
    amax: [600,600,600,600]
    xmin: [0,0,0,0]
    xmax: [600,600,600,600]
    # fiducial shot noise
    fidSN: [3.5837e-06, 1.9653e-06, 1.8574e-06, 2.1008e-06]
    # prior on shot noise (sigma = fidSN*snfrac)
    snfrac:   0.3
    # fiducial alpha_auto and priors
    fida0:  [0.,0.,0.,0.]
    a0prior: [50.,50.,50.,50.]
    # fiducial alpha_cross and priors (actually epsilon is chenprior=True)
    fidaX:  [0.,0.,0.,0.]
    aXprior: [2.,2.,2.,2.]
    # Chen prior
    # when this is true alpha_x = alpha_0/(2*b^E_1) + epsilon
    # and the fidaX, aXprior are the fiducial values and priors
    # on epsilon (rather than alphaX)
    chenprior: True
    # maximize or sample?
    maximize:  False
    stop_at_error: True
    
params:
## cosmological parameters
# fixed
  n_s: 0.96
  omega_b: 0.02254
  OmMh3: 0.098098
  m_ncdm: 0.
# sampled
  ln1e10As:
    prior: {min: 2., max: 4.}
    ref: {dist: norm, loc: 3.065, scale: 0.03}
    latex: \ln(10^{10}A_s)
  omega_cdm:
    prior: {min: 0.08, max: 0.16}
    ref: {dist: norm, loc: 0.1176, scale: 0.01}
    latex: \omega_c
# derived inputs to XcorrLike and or CLASS
  H0: "import_module('derived').get_H0"
# other derived parameters of interest
  OmM: 
    derived: "import_module('derived').get_OmM"
    latex: \Omega_m
  sigma8:
    derived: "import_module('derived').get_sigma8_emu"
    latex: \sigma_8
  S8:
    derived: "lambda OmM,sigma8: sigma8*(OmM/0.3)**0.5"
    latex: S_8
    
# nuisance parameters
# z1
  b1_LRGz1:
    prior: {min: 0., max: 3.}
    ref: {dist: norm, loc: 1.25, scale: 0.05}
    latex: b_1(z_1)
  b2_LRGz1:
    prior: {min: -5., max: 5.}
    ref: {dist: norm, loc: 0.0, scale: 1.0}
    latex: b_2(z_1)
  bs_LRGz1: 
    prior: {min: -5., max: 5.}
    ref: {dist: norm, loc: 0.0, scale: 1.0}
    latex: b_s(z_1)
  smag_LRGz1:
    prior: {dist: norm, loc: 1.062, scale: 0.1}
    ref: {dist: norm, loc: 1.062, scale: 0.05}
    latex: s_{\mu}(z_1)   
# z2
  b1_LRGz2:
    prior: {min: 0., max: 3.}
    ref: {dist: norm, loc: 1.25, scale: 0.05}
    latex: b_1(z_2)
  b2_LRGz2:
    prior: {min: -5., max: 5.}
    ref: {dist: norm, loc: 0.0, scale: 1.0}
    latex: b_2(z_2)
  bs_LRGz2: 
    prior: {min: -5., max: 5.}
    ref: {dist: norm, loc: 0.0, scale: 1.0}
    latex: b_s(z_2)
  smag_LRGz2:
    prior: {dist: norm, loc: 0.973, scale: 0.1}
    ref: {dist: norm, loc: 0.973, scale: 0.05}
    latex: s_{\mu}(z_2)   
# z3
  b1_LRGz3:
    prior: {min: 0., max: 3.}
    ref: {dist: norm, loc: 1.25, scale: 0.05}
    latex: b_1(z_3)
  b2_LRGz3:
    prior: {min: -5., max: 5.}
    ref: {dist: norm, loc: 0.0, scale: 1.0}
    latex: b_2(z_3)
  bs_LRGz3: 
    prior: {min: -5., max: 5.}
    ref: {dist: norm, loc: 0.0, scale: 1.0}
    latex: b_s(z_3)
  smag_LRGz3:
    prior: {dist: norm, loc: 0.825, scale: 0.1}
    ref: {dist: norm, loc: 0.825, scale: 0.05}
    latex: s_{\mu}(z_3)   
# z4
  b1_LRGz4:
    prior: {min: 0., max: 3.}
    ref: {dist: norm, loc: 1.25, scale: 0.05}
    latex: b_1(z_4)
  b2_LRGz4:
    prior: {min: -5., max: 5.}
    ref: {dist: norm, loc: 0.0, scale: 1.0}
    latex: b_2(z_4)
  bs_LRGz4: 
    prior: {min: -5., max: 5.}
    ref: {dist: norm, loc: 0.0, scale: 1.0}
    latex: b_s(z_4)
  smag_LRGz4:
    prior: {dist: norm, loc: 0.8, scale: 0.1}
    ref: {dist: norm, loc: 0.8, scale: 0.05}
    latex: s_{\mu}(z_4)   
    
sampler:
  mcmc:
    learn_proposal: True
    learn_proposal_Rminus1_max: 10.
    output_every: 60s
    measure_speeds: false
    max_tries: 500
    drag: False
    proposal_scale: 1.5
    Rminus1_stop: 0.03
    
output: chains/buzzard_noBAO_simCov
timing: True
stop_on_error: True